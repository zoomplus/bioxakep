version: '3'

services:
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
    ports:
      - "3000:3000"
    working_dir: "/app"

  postgres:
    image: postgres:14.8-alpine3.18
    command:
      - "postgres"
      - "-c"
      - "max_connections=50"
      - "-c"
      - "shared_buffers=1GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "work_mem=16MB"
      - "-c"
      - "maintenance_work_mem=512MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "temp_file_limit=10GB"
      - "-c"
      - "log_min_duration_statement=200ms"
      - "-c"
      - "idle_in_transaction_session_timeout=10s"
      - "-c"
      - "lock_timeout=1s"
      - "-c"
      - "statement_timeout=60s"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "pg_stat_statements.max=10000"
      - "-c"
      - "pg_stat_statements.track=all"
    environment:
      POSTGRES_DB: "bioxakep"
      POSTGRES_USER: "bioxakep"
      POSTGRES_PASSWORD: "bioxakep"
    volumes:
      - ./initdb:/docker-entrypoint-initdb.d
      - ./bioxakep-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U bioxakep -d bioxakep" ]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G

  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4:7.2
    environment:
      PGADMIN_DEFAULT_EMAIL: "bioxakep@bioxakep.ru"
      PGADMIN_DEFAULT_PASSWORD: "bioxakep"
      PGADMIN_CONFIG_SERVER_MODE: "False"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
    networks:
      - postgres

volumes:
  bioxakep-data:
  pgadmin-data:

networks:
  postgres:
    driver: bridge

#  frontend:
#    build:
#      context: .
#      dockerfile: docker/frontend/Dockerfile
#    ports:
#      - "80:80"
#    working_dir: "/frontend"
#    depends_on:
#      - backend

#  nginx:
#    build:
#      context: .
#      dockerfile: docker/nginx/Dockerfile
#    ports:
#      - "80:80"
#    depends_on:
#      - frontend
#      - backend
